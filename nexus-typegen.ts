/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AddCommentInput: { // input type
    content: string; // String!
    vehiculeId: string; // String!
  }
  InputNameUser: { // input type
    userName?: string | null; // String
  }
  loginInput: { // input type
    email: string; // String!
    password: string; // String!
  }
  vehiculeSearchFilter: { // input type
    Acceleration?: number | null; // Float
    Cylinders?: number | null; // Float
    Displacement?: number | null; // Float
    Miles_per_Gallone?: string | null; // String
    Name?: string | null; // String
    Origin?: string | null; // String
    Weight_in_lbs?: number | null; // Float
    Year?: string | null; // String
    skip?: number | null; // Int
    take?: number | null; // Int
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  LoginPayload: { // root type
    accessToken?: string | null; // String
  }
  Mutation: {};
  Query: {};
  User: { // root type
    email?: string | null; // String
    id?: string | null; // String
    name?: string | null; // String
    password?: string | null; // String
    userName?: string | null; // String
  }
  UserComments: { // root type
    content?: string | null; // String
    id: string; // String!
    userId?: string | null; // String
    vehiculeId?: string | null; // String
  }
  Vehicule: { // root type
    Acceleration?: number | null; // Float
    Cylinders?: number | null; // Float
    Displacement?: number | null; // Float
    Miles_per_Gallone?: string | null; // String
    Name?: string | null; // String
    Origin?: string | null; // String
    Weight_in_lbs?: number | null; // Float
    Year?: string | null; // String
    id?: string | null; // String
    skip?: number | null; // Int
    take?: number | null; // Int
  }
  VehiculeResult: { // root type
    data?: Array<NexusGenRootTypes['Vehicule'] | null> | null; // [Vehicule]
    total?: number | null; // Int
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  LoginPayload: { // field return type
    accessToken: string | null; // String
  }
  Mutation: { // field return type
    addComment: NexusGenRootTypes['UserComments']; // UserComments!
    login: NexusGenRootTypes['LoginPayload']; // LoginPayload!
  }
  Query: { // field return type
    getVehicules: NexusGenRootTypes['VehiculeResult'] | null; // VehiculeResult
  }
  User: { // field return type
    email: string | null; // String
    id: string | null; // String
    name: string | null; // String
    password: string | null; // String
    userName: string | null; // String
  }
  UserComments: { // field return type
    content: string | null; // String
    id: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string | null; // String
    vehiculeId: string | null; // String
  }
  Vehicule: { // field return type
    Acceleration: number | null; // Float
    Cylinders: number | null; // Float
    Displacement: number | null; // Float
    Miles_per_Gallone: string | null; // String
    Name: string | null; // String
    Origin: string | null; // String
    Weight_in_lbs: number | null; // Float
    Year: string | null; // String
    comments: NexusGenRootTypes['UserComments'] | null; // UserComments
    id: string | null; // String
    skip: number | null; // Int
    take: number | null; // Int
  }
  VehiculeResult: { // field return type
    data: Array<NexusGenRootTypes['Vehicule'] | null> | null; // [Vehicule]
    total: number | null; // Int
  }
}

export interface NexusGenFieldTypeNames {
  LoginPayload: { // field return type name
    accessToken: 'String'
  }
  Mutation: { // field return type name
    addComment: 'UserComments'
    login: 'LoginPayload'
  }
  Query: { // field return type name
    getVehicules: 'VehiculeResult'
  }
  User: { // field return type name
    email: 'String'
    id: 'String'
    name: 'String'
    password: 'String'
    userName: 'String'
  }
  UserComments: { // field return type name
    content: 'String'
    id: 'String'
    user: 'User'
    userId: 'String'
    vehiculeId: 'String'
  }
  Vehicule: { // field return type name
    Acceleration: 'Float'
    Cylinders: 'Float'
    Displacement: 'Float'
    Miles_per_Gallone: 'String'
    Name: 'String'
    Origin: 'String'
    Weight_in_lbs: 'Float'
    Year: 'String'
    comments: 'UserComments'
    id: 'String'
    skip: 'Int'
    take: 'Int'
  }
  VehiculeResult: { // field return type name
    data: 'Vehicule'
    total: 'Int'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addComment: { // args
      addCommentIput?: NexusGenInputs['AddCommentInput'] | null; // AddCommentInput
    }
    login: { // args
      userLoginInput?: NexusGenInputs['loginInput'] | null; // loginInput
    }
  }
  Query: {
    getVehicules: { // args
      vehiculeSearchFilter?: NexusGenInputs['vehiculeSearchFilter'] | null; // vehiculeSearchFilter
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}